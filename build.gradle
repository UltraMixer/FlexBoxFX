plugins {
    id 'java-library'
}

dependencies {
    compile('org.apache.commons:commons-collections4:4.2')

    implementation 'org.apache.commons:commons-collections4:4.2'

    testCompile('com.miglayout:miglayout-javafx:5.1.1-SNAPSHOT')
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile("org.testfx:testfx-core:4.0.8-alpha")
    testCompile("org.testfx:testfx-junit:4.0.8-alpha")
}


// tag::compileJava[]
ext.moduleName = 'com.onexip.flexboxfx'
compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}
// end::compileJava[]


group 'com.onexip'
version '0.1.5.4-SNAPSHOT'

task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
}

apply plugin: 'java'

sourceCompatibility = 1.9
targetCompatibility = 1.9

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "http://mix-software.com:8081/nexus/content/repositories/onexip-snapshots"
    }
}


apply plugin: 'maven'
/*apply plugin: 'signing'*/

if (project.hasProperty("signing.keyId")) {
    apply plugin: 'signing'
    signing {
        sign configurations.archives
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
/*    from javadoc*/
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}


/*signing {
    sign configurations.archives
}*/

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}


uploadArchives {
    repositories {
        mavenDeployer {

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: findProperty('ossrhUsername'), password:  findProperty('ossrhPassword'))
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: findProperty('ossrhUsername'), password:  findProperty('ossrhPassword'))
            }

            pom.project {
                name 'FlexBoxFX'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'port of CSS3 FlexBox'
                //url 'http://www.example.com/example-application'

                scm {
                    connection 'scm:git:git@github.com:UltraMixer/FlexBoxFX.git'
                    developerConnection 'scm:git:https://github.com/UltraMixer/FlexBoxFX.git'
                    url 'https://github.com/UltraMixer/FlexBoxFX'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'tobiasbley'
                        name 'Tobias Bley'
                        email 'info@onexip.com'
                    }
                }
            }
        }
    }
}

